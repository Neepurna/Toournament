# Azure DevOps Self-Hosted Agent Pipeline
# This pipeline uses a self-hosted agent instead of Microsoft-hosted agents

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - frontend/*
    - azure-pipelines-self-hosted.yml

variables:
  # Docker variables
  dockerHubConnection: 'docker-hub-connection'
  frontendRepository: 'neepurna/tournament-frontend'
  dockerTag: '$(Build.BuildId)'
  # Environment
  environment: 'dev'

pool:
  name: 'Default'  # Uses self-hosted agent pool
  # Remove the vmImage line to use self-hosted agents

stages:
- stage: Build
  displayName: 'Build Frontend Application'
  jobs:
  - job: BuildFrontend
    displayName: 'Build Frontend'
    # No pool specified here means it will use the default self-hosted pool
    
    steps:
    - task: UseNode@1
      displayName: 'Use Node.js 18'
      inputs:
        version: '18.x'
    
    - script: |
        echo "Installing dependencies..."
        cd frontend
        npm install
      displayName: 'Install Dependencies'
      
    - script: |
        echo "Building frontend application..."
        cd frontend
        npm run build
        ls -la ../dist/
      displayName: 'Build Frontend Application'
      
    - task: Docker@2
      displayName: 'Build and Push Frontend Docker Image'
      inputs:
        containerRegistry: '$(dockerHubConnection)'
        repository: '$(frontendRepository)'
        command: 'buildAndPush'
        Dockerfile: 'Dockerfile'
        buildContext: '.'
        tags: |
          $(dockerTag)
          latest
      
    - script: |
        echo "Build completed successfully!"
        echo "Build ID: $(Build.BuildId)"
        echo "Build Number: $(Build.BuildNumber)"
        echo "Docker Image: $(frontendRepository):$(dockerTag)"
        echo "Docker Image: $(frontendRepository):latest"
      displayName: 'Build Summary'

- stage: Test
  displayName: 'Test Application'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: TestFrontend
    displayName: 'Test Frontend Build'
    
    steps:
    - script: |
        echo "Running basic tests..."
        npm test
      displayName: 'Run Tests'
      continueOnError: true
      
    - script: |
        echo "=========================================="
        echo "ðŸ§ª Test Summary"
        echo "=========================================="
        echo "Frontend tests completed"
        echo "Docker image ready: $(frontendRepository):$(dockerTag)"
        echo "=========================================="
      displayName: 'Test Summary'
