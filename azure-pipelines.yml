trigger:
  branches:
    include:
    - main
    - develop

variables:
  # Docker variables
  dockerHubConnection: 'docker-hub-connection'
  dockerRepository: 'neepurna/frontend-quiz'
  dockerTag: '$(Build.BuildId)'
  
  # Azure variables - using CLI authentication
  resourceGroupName: 'frontend_group'
  aksClusterName: 'frontend'
  subscriptionId: 'cd431887-fdbe-4de1-9c26-221ab56d3f61'
  tenantId: '465ac757-2131-4711-b9a3-d8278b5c0b14'
  
  # Environment
  environment: 'dev'

stages:
- stage: Build
  displayName: 'Build and Push Docker Images'
  jobs:
  - job: BuildImages
    displayName: 'Build Docker Images'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: UseNode@1
      displayName: 'Use Node.js 18'
      inputs:
        version: '18.x'
    
    - script: |
        echo "Building application..."
        npm install
        npm run build
      displayName: 'Build Frontend Application'
      workingDirectory: 'frontend'
      continueOnError: false
    
    - task: Docker@2
      displayName: 'Build Frontend Docker Image'
      inputs:
        containerRegistry: '$(dockerHubConnection)'
        repository: '$(dockerRepository)'
        command: 'buildAndPush'
        Dockerfile: 'Dockerfile'
        tags: |
          $(dockerTag)
          latest
    
    - task: Docker@2
      displayName: 'Build Backend Docker Image'
      inputs:
        containerRegistry: '$(dockerHubConnection)'
        repository: 'neepurna/backend-quiz'
        command: 'buildAndPush'
        Dockerfile: 'backend.Dockerfile'
        tags: |
          $(dockerTag)
          latest

- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy to Azure Kubernetes Service'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'tournament-aks'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureCLI@2
            displayName: 'Azure Login and Get AKS Credentials'
            inputs:
              azureSubscription: 'Azure for Students'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              addSpnToEnvironment: true
              inlineScript: |
                echo "Logging into Azure..."
                az account set --subscription $(subscriptionId)
                az account show
                
                echo "Getting AKS credentials..."
                az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
                
                echo "Testing kubectl connection..."
                kubectl config current-context
                kubectl get nodes
          
          - task: Kubernetes@1
            displayName: 'Create Namespace'
            inputs:
              connectionType: 'None'
              command: 'apply'
              arguments: '-f k8s/namespace.yaml'
          
          - task: replacetokens@5
            displayName: 'Replace tokens in manifests'
            inputs:
              rootDirectory: 'k8s'
              targetFiles: '**/*.yaml'
              encoding: 'auto'
              tokenPattern: 'default'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'continue'
              enableTransforms: false
              useLegacyPattern: false
              enableTelemetry: true
              variables: |
                DOCKER_TAG=$(dockerTag)
                FRONTEND_IMAGE=$(dockerRepository):$(dockerTag)
                BACKEND_IMAGE=neepurna/backend-quiz:$(dockerTag)
          
          - task: Kubernetes@1
            displayName: 'Deploy Redis'
            inputs:
              connectionType: 'None'
              command: 'apply'
              arguments: '-f k8s/redis-deployment.yaml'
          
          - task: Kubernetes@1
            displayName: 'Deploy Backend'
            inputs:
              connectionType: 'None'
              command: 'apply'
              arguments: '-f k8s/backend-deployment.yaml'
          
          - task: Kubernetes@1
            displayName: 'Deploy Frontend'
            inputs:
              connectionType: 'None'
              command: 'apply'
              arguments: '-f k8s/frontend-deployment.yaml'
          
          - task: AzureCLI@2
            displayName: 'Get Deployment Status'
            inputs:
              azureSubscription: 'Azure for Students'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "=== DEPLOYMENT STATUS ==="
                kubectl get pods -n quiz-royale
                echo ""
                echo "=== SERVICES ==="
                kubectl get services -n quiz-royale
                echo ""
                echo "=== WAITING FOR LOADBALANCER ==="
                kubectl get service quiz-royale-frontend -n quiz-royale -w --timeout=300s || true
                
                # Get LoadBalancer IP
                EXTERNAL_IP=$(kubectl get service quiz-royale-frontend -n quiz-royale -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
                if [ "$EXTERNAL_IP" != "pending" ] && [ -n "$EXTERNAL_IP" ]; then
                  echo "##vso[task.setvariable variable=frontendUrl]http://$EXTERNAL_IP"
                  echo "Frontend URL: http://$EXTERNAL_IP"
                else
                  echo "LoadBalancer IP not ready yet. Check manually later."
                fi
          
          - script: |
              echo "=========================================="
              echo "ðŸš€ DEPLOYMENT COMPLETE!"
              echo "=========================================="
              echo "Environment: $(environment)"
              echo "Frontend Image: $(dockerRepository):$(dockerTag)"
              echo "Backend Image: neepurna/backend-quiz:$(dockerTag)"
              echo "Frontend URL: $(frontendUrl)"
              echo "=========================================="
              echo ""
              echo "Useful commands:"
              echo "kubectl get pods -n quiz-royale"
              echo "kubectl logs -f deployment/quiz-royale-frontend -n quiz-royale"
              echo "kubectl get services -n quiz-royale"
            displayName: 'Deployment Summary'
